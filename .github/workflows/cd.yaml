name: Publish Docker Image

on:
  workflow_run:
    workflows: ["Java CI with Maven"]
    types:
      - completed
  workflow_dispatch:

permissions:
  actions: read
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: List artifacts from triggering workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          RUN_ID: ${{ github.event.workflow_run.id }}
        run: |
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$OWNER/$REPO/actions/runs/$RUN_ID/artifacts" \
            | jq '.artifacts[] | .name'

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app.jar
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: ./build/libs/

      - name: List files
        run: |
          echo "Files:"
          find . -type f -ls
          echo "files from /build/libs"
          ls -la ./build/libs/
    
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region:  ${{vars.AWS_REGION }}
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: test aws connection
        run: |
          aws sts get-caller-identity
  
      - name: Amazon ECR "Login" Action for GitHub Actions
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: ${{vars.repositoryName}}
        run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            pwd
            mkdir jar_files
            cp *.jar ./jar_files/.
            ls -l 
            docker build . --file Dockerfile --tag $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
