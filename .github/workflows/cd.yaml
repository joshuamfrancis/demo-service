name: Publish Docker Image

on:
  workflow_run:
    workflows: ["Java CI with Maven"]
    types:
      - completed
  workflow_dispatch:

permissions:
  actions: read
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Download artifact from another workflow run
        uses: actions/download-artifact@v4
        with:
          name: app.jar
          run-id: ${{ github.event.inputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # # Use GitHub API to list artifacts for the specified workflow run
      # - name: Get Artifact List
      #   id: get-artifact
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     ARTIFACTS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
      #       "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.inputs.run_id }}/artifacts")
      #     ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[0].id')
      #     echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT

      # # Download the artifact using the artifact ID
      # - name: Download Artifact
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     curl -L -H "Authorization: Bearer $GITHUB_TOKEN" \
      #       "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ steps.get-artifact.outputs.artifact_id }}/zip" \
      #       -o artifact.zip
            
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app.jar

      - name: List files
        run: |
          echo "Files:"
          find . -type f
    
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region:  ${{vars.AWS_REGION }}
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: test aws connection
        run: |
          aws sts get-caller-identity
  
      - name: Amazon ECR "Login" Action for GitHub Actions
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: ${{vars.repositoryName}}
        run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
